/** Declaration file generated by dts-gen */

export = simplex_noise;

declare class simplex_noise {
    constructor(random: any);

    noise2D(xin: any, yin: any): any;

    noise3D(xin: any, yin: any, zin: any): any;

    noise4D(x: any, y: any, z: any, w: any): any;

}

declare namespace simplex_noise {
    namespace prototype {
        function noise2D(xin: any, yin: any): any;

        function noise3D(xin: any, yin: any, zin: any): any;

        function noise4D(x: any, y: any, z: any, w: any): any;

        namespace grad3 {
            const BYTES_PER_ELEMENT: number;

            const byteLength: number;

            const byteOffset: number;

            const length: number;

            function copyWithin(p0: any, p1: any): any;

            function entries(): any;

            function every(p0: any): any;

            function fill(p0: any): any;

            function filter(p0: any): any;

            function find(p0: any): any;

            function findIndex(p0: any): any;

            function forEach(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function join(p0: any): any;

            function keys(): any;

            function lastIndexOf(p0: any): any;

            function map(p0: any): any;

            function reduce(p0: any): any;

            function reduceRight(p0: any): any;

            function reverse(): any;

            function set(p0: any): any;

            function slice(p0: any, p1: any): any;

            function some(p0: any): any;

            function sort(p0: any): any;

            function subarray(p0: any, p1: any): any;

            function toLocaleString(): any;

            function toString(): any;

            function values(): any;

            namespace buffer {
                const byteLength: number;

                function slice(p0: any, p1: any): any;

            }

        }

        namespace grad4 {
            const BYTES_PER_ELEMENT: number;

            const byteLength: number;

            const byteOffset: number;

            const length: number;

            function copyWithin(p0: any, p1: any): any;

            function entries(): any;

            function every(p0: any): any;

            function fill(p0: any): any;

            function filter(p0: any): any;

            function find(p0: any): any;

            function findIndex(p0: any): any;

            function forEach(p0: any): any;

            function includes(p0: any): any;

            function indexOf(p0: any): any;

            function join(p0: any): any;

            function keys(): any;

            function lastIndexOf(p0: any): any;

            function map(p0: any): any;

            function reduce(p0: any): any;

            function reduceRight(p0: any): any;

            function reverse(): any;

            function set(p0: any): any;

            function slice(p0: any, p1: any): any;

            function some(p0: any): any;

            function sort(p0: any): any;

            function subarray(p0: any, p1: any): any;

            function toLocaleString(): any;

            function toString(): any;

            function values(): any;

            namespace buffer {
                const byteLength: number;

                function slice(p0: any, p1: any): any;

            }

        }

        namespace noise2D {
            const prototype: {
            };

        }

        namespace noise3D {
            const prototype: {
            };

        }

        namespace noise4D {
            const prototype: {
            };

        }

    }

}

